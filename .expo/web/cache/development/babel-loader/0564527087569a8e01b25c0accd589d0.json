{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/dillenerb/lakemonsterreactOctoberOctober/screens/MapScreen.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  color: red;\\n  font-size: 25px;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  background: white;\\n  flex: 1;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  width: 44px;\\n  height: 44px;\\n  background: black;\\n  margin-left: 20px;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport styled from \"styled-components\";\nimport MapView from \"react-native-map-clustering\";\nimport React, { useState, useEffect } from \"react\";\nimport lakesApi from \"../api/lakes\";\nimport lakePointsApi from \"../api/lakePoints\";\nimport Screen from \"../components/Screen\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { EvilIcons } from \"@expo/vector-icons\";\nimport useLocation from \"../hooks/useLocation\";\nimport LakeCard1 from \"../components/LakeCard1\";\nimport { Marker } from \"react-native-maps\";\nvar initialRegion = {\n  latitude: 37.72825,\n  longitude: -122.4324,\n  latitudeDelta: 0.25,\n  longitudeDelta: 0.15\n};\nexport default function Map(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n  console.log(\"test\", lakePointsApi.getLakePoints());\n  var mapMarkers = [];\n  var geoLocation = useLocation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lakes = _useState2[0],\n      setLakes = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      offset = _useState4[0],\n      setOffset = _useState4[1];\n\n  var _useState5 = useState(geoLocation),\n      _useState6 = _slicedToArray(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markers = _useState8[0],\n      setMarker = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      points = _useState10[0],\n      setPoints = _useState10[1];\n\n  useEffect(function () {\n    loadPoints();\n    loadLakesInit();\n\n    if (global.location) {\n      console.log(\"global location\", global.location);\n      var a = zeroOffset();\n      var b = setLakes([]);\n      var c = loadLakesInit();\n    }\n\n    return function () {};\n  }, []);\n  var limit = 20;\n\n  var loadLakes = function loadLakes() {\n    var response;\n    return _regeneratorRuntime.async(function loadLakes$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"getting lakes\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(offset, limit).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 3:\n            response = _context.sent;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadLakesInit = function loadLakesInit() {\n    var response;\n    return _regeneratorRuntime.async(function loadLakesInit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"INIT getting lakes\");\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(0, limit).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 3:\n            response = _context2.sent;\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var lastFilter = \"\";\n  var filterOffset = 0;\n\n  var loadLakesSearch = function loadLakesSearch(filter) {\n    var response;\n    return _regeneratorRuntime.async(function loadLakesSearch$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (filter != lastFilter) {\n              lastFilter = filter;\n              filterOffset = 0;\n              setLakes([]);\n            } else {\n              filterOffset = filterOffset + limit;\n            }\n\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(filterOffset, limit, filter).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 3:\n            response = _context3.sent;\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var countOffset = function countOffset() {\n    return _regeneratorRuntime.async(function countOffset$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setOffset(function (offset) {\n              return offset + limit;\n            });\n            console.log(\"Incrment Offset\");\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var zeroOffset = function zeroOffset(num) {\n    return new Promise(function (resolve, reject) {\n      setOffset(0);\n      console.log(\"zero offset\");\n    });\n  };\n\n  var loadPoints = function loadPoints() {\n    return _regeneratorRuntime.async(function loadPoints$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            console.log(\"getting lake Points\");\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(lakePointsApi.getLakePoints().then(function (res) {\n              console.log(\"got Points\");\n              setPoints(res.data);\n              return;\n            }));\n\n          case 3:\n            return _context5.abrupt(\"return\", response = _context5.sent);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var mapMarkersOne = function mapMarkersOne() {\n    return points.map(function (point) {\n      return React.createElement(Marker, {\n        key: point.siteid,\n        coordinate: {\n          latitude: point.lat,\n          longitude: point.lon\n        },\n        title: point.name,\n        onPress: function onPress() {\n          return markerClicked(point.name);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      });\n    });\n  };\n\n  var markerClicked = function markerClicked(name) {\n    console.log(\"marker clicked\", name);\n    var filter = name;\n    loadLakesSearch(filter);\n    console.log(\"marker clicked mapName\", filter);\n  };\n\n  return React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, React.createElement(MapView, {\n    style: styles.map,\n    initialRegion: initialRegion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, mapMarkersOne()), React.createElement(TextInput, {\n    style: {\n      height: 40\n    },\n    onChangeText: function onChangeText(text) {\n      return loadLakesSearch(text);\n    },\n    placeholder: \"Search Lakes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: lakes,\n    keyExtractor: function keyExtractor(lake) {\n      return lake.siteid.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate(\"LakeInfo\", {\n            itemId: item.siteid\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, React.createElement(ScrollView, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }\n      }, React.createElement(LakeCard1, {\n        rating: \"80\",\n        siteid: item.siteid,\n        title: item.name,\n        distance: item.distance,\n        img: item.imgUrl,\n        webcams: item.activeCameras,\n        airHigh: parseInt(item.highTemp),\n        airLow: parseInt(item.lowTemp),\n        windHigh: parseInt(item.avgWind),\n        windGust: parseInt(item.avgWindGust),\n        weatherSummary: item.weatherSummary,\n        waterTemp: parseInt(item.waterTemp),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }))));\n    },\n    onEndReached: loadLakes,\n    onEndReachedThreshold: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  map: {\n    width: \"100%\",\n    height: \"70%\"\n  }\n});\nvar Avatar = styled.Image(_templateObject());\nvar Container = styled.View(_templateObject2());\nvar Title = styled.Text(_templateObject3());","map":{"version":3,"sources":["/Users/dillenerb/lakemonsterreactOctoberOctober/screens/MapScreen.js"],"names":["StatusBar","styled","MapView","React","useState","useEffect","lakesApi","lakePointsApi","Screen","FlatList","EvilIcons","useLocation","LakeCard1","Marker","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","Map","navigation","console","log","getLakePoints","mapMarkers","geoLocation","lakes","setLakes","offset","setOffset","location","setLocation","markers","setMarker","points","setPoints","loadPoints","loadLakesInit","global","a","zeroOffset","b","c","limit","loadLakes","getLakes","then","res","newLakes","data","concat","r","countOffset","response","lastFilter","filterOffset","loadLakesSearch","filter","num","Promise","resolve","reject","mapMarkersOne","map","point","siteid","lat","lon","name","markerClicked","styles","height","text","lake","toString","item","container","navigate","itemId","distance","imgUrl","activeCameras","parseInt","highTemp","lowTemp","avgWind","avgWindGust","weatherSummary","waterTemp","StyleSheet","create","width","Avatar","Image","Container","View","Title","Text"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;;;;;;AAWA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,WAAP;AACA,OAAOC,SAAP;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,QADU;AAEpBC,EAAAA,SAAS,EAAE,CAAC,QAFQ;AAGpBC,EAAAA,aAAa,EAAE,IAHK;AAIpBC,EAAAA,cAAc,EAAE;AAJI,CAAtB;AAOA,eAAe,SAASC,GAAT,OAA6B;AAAA;;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBf,aAAa,CAACgB,aAAd,EAApB;AACA,MAAMC,UAAU,GAAG,EAAnB;AAEA,MAAMC,WAAW,GAAGd,WAAW,EAA/B;;AAJ0C,kBAKhBP,QAAQ,CAAC,EAAD,CALQ;AAAA;AAAA,MAKnCsB,KALmC;AAAA,MAK5BC,QAL4B;;AAAA,mBAMdvB,QAAQ,CAAC,CAAD,CANM;AAAA;AAAA,MAMnCwB,MANmC;AAAA,MAM3BC,SAN2B;;AAAA,mBAOVzB,QAAQ,CAACqB,WAAD,CAPE;AAAA;AAAA,MAOnCK,QAPmC;AAAA,MAOzBC,WAPyB;;AAAA,mBAQb3B,QAAQ,CAAC,EAAD,CARK;AAAA;AAAA,MAQnC4B,OARmC;AAAA,MAQ1BC,SAR0B;;AAAA,mBASd7B,QAAQ,CAAC,EAAD,CATM;AAAA;AAAA,MASnC8B,MATmC;AAAA,MAS3BC,SAT2B;;AAW1C9B,EAAAA,SAAS,CAAC,YAAM;AACd+B,IAAAA,UAAU;AACVC,IAAAA,aAAa;;AACb,QAAIC,MAAM,CAACR,QAAX,EAAqB;AACnBT,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BgB,MAAM,CAACR,QAAtC;AACA,UAAMS,CAAC,GAAGC,UAAU,EAApB;AACA,UAAMC,CAAC,GAAGd,QAAQ,CAAC,EAAD,CAAlB;AACA,UAAMe,CAAC,GAAGL,aAAa,EAAvB;AACD;;AAED,WAAO,YAAM,CAEZ,CAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAMM,KAAK,GAAG,EAAd;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBvB,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AADgB;AAAA,6CAEOhB,QAAQ,CAC5BuC,QADoB,CACXjB,MADW,EACHe,KADG,EAEpBG,IAFoB,CAEf,UAAAC,GAAG,EAAI;AACX1B,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,kBAAI0B,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACAtB,cAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,uBAAIA,KAAK,CAACwB,MAAN,CAAaF,QAAb,CAAJ;AAAA,eAAN,CAAR;AACD,aANoB,EAOpBF,IAPoB,CAOf,UAAAK,CAAC,EAAI;AACTC,cAAAA,WAAW;AACZ,aAToB,CAFP;;AAAA;AAEVC,YAAAA,QAFU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAcA,MAAMhB,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBhB,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AADoB;AAAA,6CAEGhB,QAAQ,CAC5BuC,QADoB,CACX,CADW,EACRF,KADQ,EAEpBG,IAFoB,CAEf,UAAAC,GAAG,EAAI;AACX1B,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,kBAAI0B,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACAtB,cAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,uBAAIA,KAAK,CAACwB,MAAN,CAAaF,QAAb,CAAJ;AAAA,eAAN,CAAR;AACD,aANoB,EAOpBF,IAPoB,CAOf,UAAAK,CAAC,EAAI;AACTC,cAAAA,WAAW;AACZ,aAToB,CAFH;;AAAA;AAEdC,YAAAA,QAFc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAcA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,gBAAIA,MAAM,IAAIH,UAAd,EAA0B;AACxBA,cAAAA,UAAU,GAAGG,MAAb;AACAF,cAAAA,YAAY,GAAG,CAAf;AACA5B,cAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,aAJD,MAIO;AACL4B,cAAAA,YAAY,GAAGA,YAAY,GAAGZ,KAA9B;AACD;;AAPqB;AAAA,6CAQCrC,QAAQ,CAC5BuC,QADoB,CACXU,YADW,EACGZ,KADH,EACUc,MADV,EAEpBX,IAFoB,CAEf,UAAAC,GAAG,EAAI;AACX1B,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,kBAAI0B,QAAQ,GAAGD,GAAG,CAACE,IAAnB;AACAtB,cAAAA,QAAQ,CAAC,UAAAD,KAAK;AAAA,uBAAIA,KAAK,CAACwB,MAAN,CAAaF,QAAb,CAAJ;AAAA,eAAN,CAAR;AACD,aANoB,EAOpBF,IAPoB,CAOf,UAAAK,CAAC,EAAI;AACTC,cAAAA,WAAW;AACZ,aAToB,CARD;;AAAA;AAQhBC,YAAAA,QARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAoBA,MAAMD,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAClBvB,YAAAA,SAAS,CAAC,UAAAD,MAAM;AAAA,qBAAIA,MAAM,GAAGe,KAAb;AAAA,aAAP,CAAT;AACAtB,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAKA,MAAMkB,UAAU,GAAG,SAAbA,UAAa,CAAAkB,GAAG;AAAA,WACpB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BhC,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAHD,CADoB;AAAA,GAAtB;;AAMA,MAAMc,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AACjBf,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AADiB;AAAA,6CAEQf,aAAa,CAACgB,aAAd,GAA8BuB,IAA9B,CAAmC,UAAAC,GAAG,EAAI;AACjE1B,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEAa,cAAAA,SAAS,CAACY,GAAG,CAACE,IAAL,CAAT;AACA;AAMD,aAVwB,CAFR;;AAAA;AAAA,8CAETI,QAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAcA,MAAMS,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,WAAO5B,MAAM,CAAC6B,GAAP,CAAW,UAAAC,KAAK;AAAA,aACrB,oBAAC,MAAD;AACE,QAAA,GAAG,EAAEA,KAAK,CAACC,MADb;AAEE,QAAA,UAAU,EAAE;AAAElD,UAAAA,QAAQ,EAAEiD,KAAK,CAACE,GAAlB;AAAuBlD,UAAAA,SAAS,EAAEgD,KAAK,CAACG;AAAxC,SAFd;AAGE,QAAA,KAAK,EAAEH,KAAK,CAACI,IAHf;AAIE,QAAA,OAAO,EAAE;AAAA,iBAAMC,aAAa,CAACL,KAAK,CAACI,IAAP,CAAnB;AAAA,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADqB;AAAA,KAAhB,CAAP;AAQD,GATD;;AAWA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAD,IAAI,EAAI;AAC5B/C,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B8C,IAA9B;AACA,QAAMX,MAAM,GAAGW,IAAf;AACAZ,IAAAA,eAAe,CAACC,MAAD,CAAf;AACApC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCmC,MAAtC;AACD,GALD;;AAOA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEa,MAAM,CAACP,GAAvB;AAA4B,IAAA,aAAa,EAAEjD,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGgD,aAAa,EADhB,CADF,EAKE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE;AAAES,MAAAA,MAAM,EAAE;AAAV,KADT;AAEE,IAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIhB,eAAe,CAACgB,IAAD,CAAnB;AAAA,KAFpB;AAGE,IAAA,WAAW,EAAC,cAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAUE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAE9C,KADR;AAEE,IAAA,YAAY,EAAE,sBAAA+C,IAAI;AAAA,aAAIA,IAAI,CAACR,MAAL,CAAYS,QAAZ,EAAJ;AAAA,KAFpB;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGC,IAAH,SAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACM,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AACE,QAAA,OAAO,EAAE,mBAAM;AACbxD,UAAAA,UAAU,CAACyD,QAAX,CAAoB,UAApB,EAAgC;AAC9BC,YAAAA,MAAM,EAAEH,IAAI,CAACV;AADiB,WAAhC;AAGD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,MAAM,EAAC,IADT;AAEE,QAAA,MAAM,EAAEU,IAAI,CAACV,MAFf;AAGE,QAAA,KAAK,EAAEU,IAAI,CAACP,IAHd;AAIE,QAAA,QAAQ,EAAEO,IAAI,CAACI,QAJjB;AAKE,QAAA,GAAG,EAAEJ,IAAI,CAACK,MALZ;AAME,QAAA,OAAO,EAAEL,IAAI,CAACM,aANhB;AAOE,QAAA,OAAO,EAAEC,QAAQ,CAACP,IAAI,CAACQ,QAAN,CAPnB;AAQE,QAAA,MAAM,EAAED,QAAQ,CAACP,IAAI,CAACS,OAAN,CARlB;AASE,QAAA,QAAQ,EAAEF,QAAQ,CAACP,IAAI,CAACU,OAAN,CATpB;AAUE,QAAA,QAAQ,EAAEH,QAAQ,CAACP,IAAI,CAACW,WAAN,CAVpB;AAWE,QAAA,cAAc,EAAEX,IAAI,CAACY,cAXvB;AAYE,QAAA,SAAS,EAAEL,QAAQ,CAACP,IAAI,CAACa,SAAN,CAZrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAPF,CADF,CADU;AAAA,KAHd;AA+BE,IAAA,YAAY,EAAE5C,SA/BhB;AAgCE,IAAA,qBAAqB,EAAE,GAhCzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AA+CD;AAED,IAAM0B,MAAM,GAAGmB,UAAU,CAACC,MAAX,CAAkB;AAC/B3B,EAAAA,GAAG,EAAE;AACH4B,IAAAA,KAAK,EAAE,MADJ;AAEHpB,IAAAA,MAAM,EAAE;AAFL;AAD0B,CAAlB,CAAf;AAOA,IAAMqB,MAAM,GAAG3F,MAAM,CAAC4F,KAAV,mBAAZ;AASA,IAAMC,SAAS,GAAG7F,MAAM,CAAC8F,IAAV,oBAAf;AAIA,IAAMC,KAAK,GAAG/F,MAAM,CAACgG,IAAV,oBAAX","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  Button,\n  Text,\n  View,\n  ScrollView,\n  Dimensions\n} from \"react-native\";\nimport styled from \"styled-components\";\nimport MapView from \"react-native-map-clustering\";\nimport React, { useState, useEffect } from \"react\";\nimport lakesApi from \"../api/lakes\";\nimport lakePointsApi from \"../api/lakePoints\";\nimport Screen from \"../components/Screen\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { EvilIcons } from \"@expo/vector-icons\";\nimport useLocation from \"../hooks/useLocation\";\nimport LakeCard1 from \"../components/LakeCard1\";\nimport { Marker } from \"react-native-maps\";\n\nconst initialRegion = {\n  latitude: 37.72825,\n  longitude: -122.4324,\n  latitudeDelta: 0.25,\n  longitudeDelta: 0.15\n};\n\nexport default function Map({ navigation }) {\n  console.log(\"test\", lakePointsApi.getLakePoints());\n  const mapMarkers = [];\n\n  const geoLocation = useLocation();\n  const [lakes, setLakes] = useState([]);\n  const [offset, setOffset] = useState(0);\n  const [location, setLocation] = useState(geoLocation);\n  const [markers, setMarker] = useState([]);\n  const [points, setPoints] = useState([]);\n\n  useEffect(() => {\n    loadPoints();\n    loadLakesInit();\n    if (global.location) {\n      console.log(\"global location\", global.location);\n      const a = zeroOffset();\n      const b = setLakes([]);\n      const c = loadLakesInit();\n    }\n\n    return () => {\n      //cleanup\n    };\n  }, []);\n\n  const limit = 20;\n\n  const loadLakes = async () => {\n    console.log(\"getting lakes\");\n    const response = await lakesApi\n      .getLakes(offset, limit)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n\n  const loadLakesInit = async () => {\n    console.log(\"INIT getting lakes\");\n    const response = await lakesApi\n      .getLakes(0, limit)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n\n  var lastFilter = \"\";\n  var filterOffset = 0;\n\n  const loadLakesSearch = async filter => {\n    if (filter != lastFilter) {\n      lastFilter = filter;\n      filterOffset = 0;\n      setLakes([]);\n    } else {\n      filterOffset = filterOffset + limit;\n    }\n    const response = await lakesApi\n      .getLakes(filterOffset, limit, filter)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n\n  const countOffset = async () => {\n    setOffset(offset => offset + limit);\n    console.log(\"Incrment Offset\");\n  };\n\n  const zeroOffset = num =>\n    new Promise((resolve, reject) => {\n      setOffset(0);\n      console.log(\"zero offset\");\n    });\n\n  const loadPoints = async () => {\n    console.log(\"getting lake Points\");\n    return (response = await lakePointsApi.getLakePoints().then(res => {\n      console.log(\"got Points\");\n      //let points = res.data;\n      setPoints(res.data);\n      return;\n      //setState({ points: points });\n\n      //points.map(point => {\n      //  console.log(\"LAT\", point.lat);\n      //});\n    }));\n  };\n  const mapMarkersOne = () => {\n    return points.map(point => (\n      <Marker\n        key={point.siteid}\n        coordinate={{ latitude: point.lat, longitude: point.lon }}\n        title={point.name}\n        onPress={() => markerClicked(point.name)}\n      ></Marker>\n    ));\n  };\n\n  const markerClicked = name => {\n    console.log(\"marker clicked\", name);\n    const filter = name;\n    loadLakesSearch(filter);\n    console.log(\"marker clicked mapName\", filter);\n  };\n\n  return (\n    <Container>\n      <MapView style={styles.map} initialRegion={initialRegion}>\n        {mapMarkersOne()}\n      </MapView>\n\n      <TextInput\n        style={{ height: 40 }}\n        onChangeText={text => loadLakesSearch(text)}\n        placeholder=\"Search Lakes\"\n      ></TextInput>\n      <FlatList\n        data={lakes}\n        keyExtractor={lake => lake.siteid.toString()}\n        renderItem={({ item }) => (\n          <View style={styles.container}>\n            <TouchableOpacity\n              onPress={() => {\n                navigation.navigate(\"LakeInfo\", {\n                  itemId: item.siteid\n                });\n              }}\n            >\n              <ScrollView>\n                <LakeCard1\n                  rating=\"80\"\n                  siteid={item.siteid}\n                  title={item.name}\n                  distance={item.distance}\n                  img={item.imgUrl}\n                  webcams={item.activeCameras}\n                  airHigh={parseInt(item.highTemp)}\n                  airLow={parseInt(item.lowTemp)}\n                  windHigh={parseInt(item.avgWind)}\n                  windGust={parseInt(item.avgWindGust)}\n                  weatherSummary={item.weatherSummary}\n                  waterTemp={parseInt(item.waterTemp)}\n                ></LakeCard1>\n              </ScrollView>\n            </TouchableOpacity>\n          </View>\n        )}\n        onEndReached={loadLakes}\n        onEndReachedThreshold={0.5}\n      />\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create({\n  map: {\n    width: \"100%\",\n    height: \"70%\"\n  }\n});\n\nconst Avatar = styled.Image`\n  width: 44px;\n  height: 44px;\n  background: black;\n  margin-left: 20px;\n  position: absolute;\n  top: 0;\n  left: 0;\n`;\nconst Container = styled.View`\n  background: white;\n  flex: 1;\n`;\nconst Title = styled.Text`\n  color: red;\n  font-size: 25px;\n`;\n"]},"metadata":{},"sourceType":"module"}