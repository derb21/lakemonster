{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dillenerb/lakemonsterreactOctoberOctober/node_modules/react-native-map-clustering/lib/ClusteredMapView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, useState, useEffect, useMemo, useRef, forwardRef } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MapView, { Marker, Polyline } from \"react-native-maps\";\nimport SuperCluster from \"supercluster\";\nimport ClusterMarker from \"./ClusteredMarker\";\nimport { isMarker, markerToGeoJSONFeature, calculateBBox, returnMapZoom, generateSpiral } from \"./helpers\";\nvar ClusteredMapView = forwardRef(function (_ref, _ref3) {\n  var radius = _ref.radius,\n      maxZoom = _ref.maxZoom,\n      minZoom = _ref.minZoom,\n      extent = _ref.extent,\n      nodeSize = _ref.nodeSize,\n      children = _ref.children,\n      onClusterPress = _ref.onClusterPress,\n      onRegionChangeComplete = _ref.onRegionChangeComplete,\n      onMarkersChange = _ref.onMarkersChange,\n      preserveClusterPressBehavior = _ref.preserveClusterPressBehavior,\n      clusteringEnabled = _ref.clusteringEnabled,\n      clusterColor = _ref.clusterColor,\n      clusterTextColor = _ref.clusterTextColor,\n      clusterFontFamily = _ref.clusterFontFamily,\n      spiderLineColor = _ref.spiderLineColor,\n      layoutAnimationConf = _ref.layoutAnimationConf,\n      animationEnabled = _ref.animationEnabled,\n      renderCluster = _ref.renderCluster,\n      tracksViewChanges = _ref.tracksViewChanges,\n      spiralEnabled = _ref.spiralEnabled,\n      superClusterRef = _ref.superClusterRef,\n      restProps = _objectWithoutProperties(_ref, [\"radius\", \"maxZoom\", \"minZoom\", \"extent\", \"nodeSize\", \"children\", \"onClusterPress\", \"onRegionChangeComplete\", \"onMarkersChange\", \"preserveClusterPressBehavior\", \"clusteringEnabled\", \"clusterColor\", \"clusterTextColor\", \"clusterFontFamily\", \"spiderLineColor\", \"layoutAnimationConf\", \"animationEnabled\", \"renderCluster\", \"tracksViewChanges\", \"spiralEnabled\", \"superClusterRef\"]);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      markers = _useState2[0],\n      updateMarkers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      spiderMarkers = _useState4[0],\n      updateSpiderMarker = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      otherChildren = _useState6[0],\n      updateChildren = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      superCluster = _useState8[0],\n      setSuperCluster = _useState8[1];\n\n  var _useState9 = useState(restProps.region || restProps.initialRegion),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentRegion = _useState10[0],\n      updateRegion = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isSpiderfier = _useState12[0],\n      updateSpiderfier = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      clusterChildren = _useState14[0],\n      updateClusterChildren = _useState14[1];\n\n  var mapRef = useRef();\n  var propsChildren = useMemo(function () {\n    return React.Children.toArray(children);\n  }, [children]);\n  useEffect(function () {\n    var rawData = [];\n    var otherChildren = [];\n\n    if (!clusteringEnabled) {\n      updateSpiderMarker([]);\n      updateMarkers([]);\n      updateChildren(propsChildren);\n      return;\n    }\n\n    React.Children.forEach(children, function (child, index) {\n      if (isMarker(child)) {\n        rawData.push(markerToGeoJSONFeature(child, index));\n      } else {\n        otherChildren.push(child);\n      }\n    });\n    var superCluster = new SuperCluster({\n      radius: radius,\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n      extent: extent,\n      nodeSize: nodeSize\n    });\n    superCluster.load(rawData);\n    var bBox = calculateBBox(currentRegion);\n    var zoom = returnMapZoom(currentRegion, bBox, minZoom);\n    var markers = superCluster.getClusters(bBox, zoom);\n    updateMarkers(markers);\n    updateChildren(otherChildren);\n    setSuperCluster(superCluster);\n    superClusterRef.current = superCluster;\n  }, [children, restProps.region, restProps.initialRegion, clusteringEnabled]);\n  useEffect(function () {\n    if (!spiralEnabled) return;\n\n    if (isSpiderfier && markers.length > 0) {\n      var allSpiderMarkers = [];\n      markers.map(function (marker, i) {\n        var positions = generateSpiral(marker, clusterChildren, markers, i);\n        allSpiderMarkers.push.apply(allSpiderMarkers, _toConsumableArray(positions));\n      });\n      updateSpiderMarker(allSpiderMarkers);\n    } else {\n      updateSpiderMarker([]);\n    }\n  }, [isSpiderfier, markers]);\n\n  var _onRegionChangeComplete = function _onRegionChangeComplete(region) {\n    if (superCluster) {\n      var bBox = calculateBBox(region);\n      var zoom = returnMapZoom(region, bBox, minZoom);\n\n      var _markers = superCluster.getClusters(bBox, zoom);\n\n      if (animationEnabled && Platform.OS === \"ios\") {\n        LayoutAnimation.configureNext(layoutAnimationConf);\n      }\n\n      if (zoom >= 17 && _markers.length > 0 && clusterChildren) {\n        if (spiralEnabled) updateSpiderfier(true);\n      } else {\n        if (spiralEnabled) updateSpiderfier(false);\n      }\n\n      updateMarkers(_markers);\n      onMarkersChange(_markers);\n      onRegionChangeComplete(region, _markers);\n      updateRegion(region);\n    } else {\n      onRegionChangeComplete(region);\n    }\n  };\n\n  var _onClusterPress = function _onClusterPress(cluster) {\n    return function () {\n      var children = superCluster.getLeaves(cluster.id, Infinity);\n      updateClusterChildren(children);\n\n      if (preserveClusterPressBehavior) {\n        onClusterPress(cluster, children);\n        return;\n      }\n\n      var coordinates = children.map(function (_ref2) {\n        var geometry = _ref2.geometry;\n        return {\n          latitude: geometry.coordinates[1],\n          longitude: geometry.coordinates[0]\n        };\n      });\n      mapRef.current.fitToCoordinates(coordinates, {\n        edgePadding: restProps.edgePadding\n      });\n      onClusterPress(cluster, children);\n    };\n  };\n\n  return React.createElement(MapView, _extends({}, restProps, {\n    ref: function ref(map) {\n      mapRef.current = map;\n      if (_ref3) _ref3.current = map;\n      restProps.mapRef(map);\n    },\n    onRegionChangeComplete: _onRegionChangeComplete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }), markers.map(function (marker) {\n    return marker.properties.point_count === 0 ? propsChildren[marker.properties.index] : !isSpiderfier ? renderCluster ? renderCluster(_objectSpread({\n      onPress: _onClusterPress(marker),\n      clusterColor: clusterColor,\n      clusterTextColor: clusterTextColor,\n      clusterFontFamily: clusterFontFamily\n    }, marker)) : React.createElement(ClusterMarker, _extends({\n      key: \"cluster-\" + marker.id\n    }, marker, {\n      onPress: _onClusterPress(marker),\n      clusterColor: clusterColor,\n      clusterTextColor: clusterTextColor,\n      clusterFontFamily: clusterFontFamily,\n      tracksViewChanges: tracksViewChanges,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 15\n      }\n    })) : null;\n  }), otherChildren, spiderMarkers.map(function (marker) {\n    return propsChildren[marker.index] ? React.cloneElement(propsChildren[marker.index], {\n      coordinate: _objectSpread({}, marker)\n    }) : null;\n  }), spiderMarkers.map(function (marker, index) {\n    {\n      return React.createElement(Polyline, {\n        key: index,\n        coordinates: [marker.centerPoint, marker, marker.centerPoint],\n        strokeColor: spiderLineColor,\n        strokeWidth: 1,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }\n      });\n    }\n  }));\n});\nClusteredMapView.defaultProps = {\n  clusteringEnabled: true,\n  spiralEnabled: true,\n  animationEnabled: true,\n  preserveClusterPressBehavior: false,\n  layoutAnimationConf: LayoutAnimation.Presets.spring,\n  tracksViewChanges: false,\n  radius: Dimensions.get(\"window\").width * 0.06,\n  maxZoom: 20,\n  minZoom: 1,\n  extent: 512,\n  nodeSize: 64,\n  edgePadding: {\n    top: 50,\n    left: 50,\n    right: 50,\n    bottom: 50\n  },\n  clusterColor: \"#00B386\",\n  clusterTextColor: \"#FFFFFF\",\n  spiderLineColor: \"#FF0000\",\n  onRegionChangeComplete: function onRegionChangeComplete() {},\n  onClusterPress: function onClusterPress() {},\n  onMarkersChange: function onMarkersChange() {},\n  superClusterRef: {},\n  mapRef: function mapRef() {}\n};\nexport default memo(ClusteredMapView);","map":{"version":3,"sources":["/Users/dillenerb/lakemonsterreactOctoberOctober/node_modules/react-native-map-clustering/lib/ClusteredMapView.js"],"names":["React","memo","useState","useEffect","useMemo","useRef","forwardRef","MapView","Marker","Polyline","SuperCluster","ClusterMarker","isMarker","markerToGeoJSONFeature","calculateBBox","returnMapZoom","generateSpiral","ClusteredMapView","ref","radius","maxZoom","minZoom","extent","nodeSize","children","onClusterPress","onRegionChangeComplete","onMarkersChange","preserveClusterPressBehavior","clusteringEnabled","clusterColor","clusterTextColor","clusterFontFamily","spiderLineColor","layoutAnimationConf","animationEnabled","renderCluster","tracksViewChanges","spiralEnabled","superClusterRef","restProps","markers","updateMarkers","spiderMarkers","updateSpiderMarker","otherChildren","updateChildren","superCluster","setSuperCluster","region","initialRegion","currentRegion","updateRegion","isSpiderfier","updateSpiderfier","clusterChildren","updateClusterChildren","mapRef","propsChildren","Children","toArray","rawData","forEach","child","index","push","load","bBox","zoom","getClusters","current","length","allSpiderMarkers","map","marker","i","positions","_onRegionChangeComplete","Platform","OS","LayoutAnimation","configureNext","_onClusterPress","cluster","getLeaves","id","Infinity","coordinates","geometry","latitude","longitude","fitToCoordinates","edgePadding","properties","point_count","onPress","cloneElement","coordinate","centerPoint","defaultProps","Presets","spring","Dimensions","get","width","top","left","right","bottom"],"mappings":"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","sourcesContent":["import React, {\n  memo,\n  useState,\n  useEffect,\n  useMemo,\n  useRef,\n  forwardRef,\n} from \"react\";\nimport { Dimensions, LayoutAnimation, Platform } from \"react-native\";\nimport MapView, { Marker, Polyline } from \"react-native-maps\";\nimport SuperCluster from \"supercluster\";\nimport ClusterMarker from \"./ClusteredMarker\";\nimport {\n  isMarker,\n  markerToGeoJSONFeature,\n  calculateBBox,\n  returnMapZoom,\n  generateSpiral,\n} from \"./helpers\";\n\nconst ClusteredMapView = forwardRef(\n  (\n    {\n      radius,\n      maxZoom,\n      minZoom,\n      extent,\n      nodeSize,\n      children,\n      onClusterPress,\n      onRegionChangeComplete,\n      onMarkersChange,\n      preserveClusterPressBehavior,\n      clusteringEnabled,\n      clusterColor,\n      clusterTextColor,\n      clusterFontFamily,\n      spiderLineColor,\n      layoutAnimationConf,\n      animationEnabled,\n      renderCluster,\n      tracksViewChanges,\n      spiralEnabled,\n      superClusterRef,\n      ...restProps\n    },\n    ref\n  ) => {\n    const [markers, updateMarkers] = useState([]);\n    const [spiderMarkers, updateSpiderMarker] = useState([]);\n    const [otherChildren, updateChildren] = useState([]);\n    const [superCluster, setSuperCluster] = useState(null);\n    const [currentRegion, updateRegion] = useState(\n      restProps.region || restProps.initialRegion\n    );\n\n    const [isSpiderfier, updateSpiderfier] = useState(false);\n    const [clusterChildren, updateClusterChildren] = useState(null);\n    const mapRef = useRef();\n\n    const propsChildren = useMemo(() => React.Children.toArray(children), [\n      children,\n    ]);\n\n    useEffect(() => {\n      const rawData = [];\n      const otherChildren = [];\n\n      if (!clusteringEnabled) {\n        updateSpiderMarker([]);\n        updateMarkers([]);\n        updateChildren(propsChildren);\n        return;\n      }\n\n      React.Children.forEach(children, (child, index) => {\n        if (isMarker(child)) {\n          rawData.push(markerToGeoJSONFeature(child, index));\n        } else {\n          otherChildren.push(child);\n        }\n      });\n\n      const superCluster = new SuperCluster({\n        radius,\n        maxZoom,\n        minZoom,\n        extent,\n        nodeSize,\n      });\n\n      superCluster.load(rawData);\n\n      const bBox = calculateBBox(currentRegion);\n      const zoom = returnMapZoom(currentRegion, bBox, minZoom);\n      const markers = superCluster.getClusters(bBox, zoom);\n\n      updateMarkers(markers);\n      updateChildren(otherChildren);\n      setSuperCluster(superCluster);\n\n      superClusterRef.current = superCluster;\n    }, [\n      children,\n      restProps.region,\n      restProps.initialRegion,\n      clusteringEnabled,\n    ]);\n\n    useEffect(() => {\n      if (!spiralEnabled) return;\n\n      if (isSpiderfier && markers.length > 0) {\n        let allSpiderMarkers = [];\n\n        markers.map((marker, i) => {\n          let positions = generateSpiral(marker, clusterChildren, markers, i);\n          allSpiderMarkers.push(...positions);\n        });\n\n        updateSpiderMarker(allSpiderMarkers);\n      } else {\n        updateSpiderMarker([]);\n      }\n    }, [isSpiderfier, markers]);\n\n    const _onRegionChangeComplete = (region) => {\n      if (superCluster) {\n        const bBox = calculateBBox(region);\n        const zoom = returnMapZoom(region, bBox, minZoom);\n        const markers = superCluster.getClusters(bBox, zoom);\n\n        if (animationEnabled && Platform.OS === \"ios\") {\n          LayoutAnimation.configureNext(layoutAnimationConf);\n        }\n        if (zoom >= 17 && markers.length > 0 && clusterChildren) {\n          if (spiralEnabled) updateSpiderfier(true);\n        } else {\n          if (spiralEnabled) updateSpiderfier(false);\n        }\n\n        updateMarkers(markers);\n        onMarkersChange(markers);\n        onRegionChangeComplete(region, markers);\n        updateRegion(region);\n      } else {\n        onRegionChangeComplete(region);\n      }\n    };\n\n    const _onClusterPress = (cluster) => () => {\n      const children = superCluster.getLeaves(cluster.id, Infinity);\n      updateClusterChildren(children);\n\n      if (preserveClusterPressBehavior) {\n        onClusterPress(cluster, children);\n        return;\n      }\n\n      const coordinates = children.map(({ geometry }) => ({\n        latitude: geometry.coordinates[1],\n        longitude: geometry.coordinates[0],\n      }));\n\n      mapRef.current.fitToCoordinates(coordinates, {\n        edgePadding: restProps.edgePadding,\n      });\n\n      onClusterPress(cluster, children);\n    };\n\n    return (\n      <MapView\n        {...restProps}\n        ref={(map) => {\n          mapRef.current = map;\n          if (ref) ref.current = map;\n          restProps.mapRef(map);\n        }}\n        onRegionChangeComplete={_onRegionChangeComplete}\n      >\n        {markers.map((marker) =>\n          marker.properties.point_count === 0 ? (\n            propsChildren[marker.properties.index]\n          ) : !isSpiderfier ? (\n            renderCluster ? (\n              renderCluster({\n                onPress: _onClusterPress(marker),\n                clusterColor,\n                clusterTextColor,\n                clusterFontFamily,\n                ...marker,\n              })\n            ) : (\n              <ClusterMarker\n                key={`cluster-${marker.id}`}\n                {...marker}\n                onPress={_onClusterPress(marker)}\n                clusterColor={clusterColor}\n                clusterTextColor={clusterTextColor}\n                clusterFontFamily={clusterFontFamily}\n                tracksViewChanges={tracksViewChanges}\n              />\n            )\n          ) : null\n        )}\n        {otherChildren}\n        {spiderMarkers.map((marker) => {\n          return propsChildren[marker.index]\n            ? React.cloneElement(propsChildren[marker.index], {\n                coordinate: { ...marker },\n              })\n            : null;\n        })}\n        {spiderMarkers.map((marker, index) => {\n          {\n            return (\n              <Polyline\n                key={index}\n                coordinates={[marker.centerPoint, marker, marker.centerPoint]}\n                strokeColor={spiderLineColor}\n                strokeWidth={1}\n              />\n            );\n          }\n        })}\n      </MapView>\n    );\n  }\n);\n\nClusteredMapView.defaultProps = {\n  clusteringEnabled: true,\n  spiralEnabled: true,\n  animationEnabled: true,\n  preserveClusterPressBehavior: false,\n  layoutAnimationConf: LayoutAnimation.Presets.spring,\n  tracksViewChanges: false,\n  // SuperCluster parameters\n  radius: Dimensions.get(\"window\").width * 0.06,\n  maxZoom: 20,\n  minZoom: 1,\n  extent: 512,\n  nodeSize: 64,\n  // Map parameters\n  edgePadding: { top: 50, left: 50, right: 50, bottom: 50 },\n  // Cluster styles\n  clusterColor: \"#00B386\",\n  clusterTextColor: \"#FFFFFF\",\n  spiderLineColor: \"#FF0000\",\n  // Callbacks\n  onRegionChangeComplete: () => {},\n  onClusterPress: () => {},\n  onMarkersChange: () => {},\n  superClusterRef: {},\n  mapRef: () => {},\n};\n\nexport default memo(ClusteredMapView);\n"]},"metadata":{},"sourceType":"module"}