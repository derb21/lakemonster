{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/dillenerb/lakemonsterreactOctoberOctober/screens/LakeInfoScreen.js\";\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  color: red;\\n  font-size: 25px;\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  border-radius: 20px;\\n  height: 50%;\\n  width: 100%;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  height: 50%;\\n  width: 100%;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  text-align: center;\\n  font-size: 35px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport styled from \"styled-components\";\nimport BottomCard from \"../components/LakeDataCard\";\nimport DescriptionCard from \"../components/DescriptionCard\";\nimport TopCard from \"../components/LakeInfoTopCard\";\nimport React, { useState, useEffect } from \"react\";\nimport lakesApi from \"../api/lakeBySiteId\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ForecastCard from \"../components/forecastChart\";\nimport DailyForecast from \"../components/DailyForecast\";\n\nvar image = require(\"../assets/rainy.jpg\");\n\nfunction setBackground(props) {\n  try {\n    var val = weatherSummary;\n    console.log(\"background image = \" + val);\n\n    switch (true) {\n      case val == \"Overcast\":\n        console.log(\"background image sunny= \");\n        image = (_readOnlyError(\"image\"), overcast);\n        console.log(\"overcast\");\n        break;\n\n      case val == \"clear-night\" || val == \"partly-cloudy-night\":\n        this.backgroundImg = \"night\";\n        break;\n\n      case val == \"cloudy\" || val == \"partly-cloudy-day\":\n        this.backgroundImg = \"cloudy\";\n        break;\n\n      case val == \"snow\" || val == \"sleet\":\n        this.backgroundImg = \"snow\";\n        break;\n\n      case val == \"rain\" || val == \"thunderstorm\":\n        console.log(\"background image rainy= \");\n        this.backgroundImg = \"rain\";\n        break;\n\n      default:\n        break;\n    }\n  } catch (err) {}\n}\n\nvar LakeInfo = function LakeInfo(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      lakeData = _useState2[0],\n      setlakeData = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      forecast = _useState4[0],\n      setforecast = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hourly = _useState6[0],\n      sethourly = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gis = _useState8[0],\n      setgis = _useState8[1];\n\n  useEffect(function () {\n    loadLakes();\n    return function () {};\n  }, []);\n\n  var loadLakes = function loadLakes() {\n    var siteid, response;\n    return _regeneratorRuntime.async(function loadLakes$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"getting lakes\");\n            siteid = itemId;\n            response = lakesApi.getLakeInfo(siteid).then(function (res) {\n              console.log(\"got data\", res.data[0].details.name);\n              setlakeData(res.data[0].details);\n              sethourly(res.data[0].details.hourly);\n              setforecast(res.data[0].details.forecast);\n              setgis(res.data[0].gis);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  setBackground();\n  var itemId = route.params.itemId;\n  var imageUrl = \"https://vps.lakemon.com/cdn/lakeimg/\" + lakeData.newImgUrl;\n  var gisImage = \"https://vps.lakemon.com/cdn/lakeimg/\" + gis.heat_file;\n  return React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, React.createElement(TopCard, {\n    name: lakeData.name,\n    weatherSummary: lakeData.weatherSummary,\n    airTemp: lakeData.airTemp,\n    image: imageUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), React.createElement(FlatList, {\n    horizontal: true,\n    data: hourly,\n    keyExtractor: function keyExtractor(day) {\n      return day.day;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, React.createElement(ForecastCard, {\n        hour: item.day_name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), React.createElement(BottomCard, {\n    name: lakeData.name,\n    airTemp: lakeData.airTemp,\n    waterTemp: lakeData.waterTemp,\n    windCurrent: lakeData.windCurrent,\n    humidity: lakeData.humidity,\n    sunset: lakeData.Tsunset,\n    sunrise: lakeData.Tsunrise,\n    ozone: lakeData.ozone,\n    lowTemp: lakeData.lowTemp,\n    highTemp: lakeData.highTemp,\n    gisImage: gisImage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), React.createElement(DescriptionCard, {\n    description: lakeData.description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), React.createElement(FlatList, {\n    horizontal: true,\n    data: hourly,\n    keyExtractor: function keyExtractor(day) {\n      return day.day;\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, React.createElement(DailyForecast, {\n        hour: item.day_name,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  container: {\n    borderColor: \"gray\",\n    height: 350,\n    width: 75\n  }\n});\nexport default LakeInfo;\nvar Container = styled.View(_templateObject());\nvar Name = styled.Text(_templateObject2());\nvar Title = styled.Text(_templateObject3());\nvar Divider = styled.View(_templateObject4());\nvar Image = styled.Image(_templateObject5());\nvar Card = styled.View(_templateObject6());\nvar Text = styled.Text(_templateObject7());","map":{"version":3,"sources":["/Users/dillenerb/lakemonsterreactOctoberOctober/screens/LakeInfoScreen.js"],"names":["styled","BottomCard","DescriptionCard","TopCard","React","useState","useEffect","lakesApi","ForecastCard","DailyForecast","image","require","setBackground","props","val","weatherSummary","console","log","overcast","backgroundImg","err","LakeInfo","route","navigation","lakeData","setlakeData","forecast","setforecast","hourly","sethourly","gis","setgis","loadLakes","siteid","itemId","response","getLakeInfo","then","res","data","details","name","params","imageUrl","newImgUrl","gisImage","heat_file","airTemp","day","item","styles","container","day_name","waterTemp","windCurrent","humidity","Tsunset","Tsunrise","ozone","lowTemp","highTemp","description","StyleSheet","create","center","flex","justifyContent","alignItems","textAlign","borderColor","height","width","Container","View","Name","Text","Title","Divider","Image","Card"],"mappings":"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","sourcesContent":["// ./screens/LakeInfo.js\nimport { View, Button, StyleSheet, FlatList } from \"react-native\";\nimport styled from \"styled-components\";\nimport BottomCard from \"../components/LakeDataCard\";\nimport DescriptionCard from \"../components/DescriptionCard\";\nimport TopCard from \"../components/LakeInfoTopCard\";\nimport React, { useState, useEffect } from \"react\";\nimport lakesApi from \"../api/lakeBySiteId\";\nimport { ScrollView } from \"react-native\";\nimport ForecastCard from \"../components/forecastChart\";\nimport DailyForecast from \"../components/DailyForecast\";\n\nconst image = require(\"../assets/rainy.jpg\");\nfunction setBackground(props) {\n  try {\n    var val = weatherSummary;\n    console.log(\"background image = \" + val);\n    switch (true) {\n      case val == \"Overcast\":\n        console.log(\"background image sunny= \");\n        image = overcast;\n        console.log(\"overcast\");\n        break;\n\n      case val == \"clear-night\" || val == \"partly-cloudy-night\":\n        this.backgroundImg = \"night\";\n        break;\n\n      case val == \"cloudy\" || val == \"partly-cloudy-day\":\n        this.backgroundImg = \"cloudy\";\n        break;\n\n      case val == \"snow\" || val == \"sleet\":\n        this.backgroundImg = \"snow\";\n        break;\n\n      case val == \"rain\" || val == \"thunderstorm\":\n        console.log(\"background image rainy= \");\n        this.backgroundImg = \"rain\";\n        break;\n      default:\n        break;\n    }\n  } catch (err) {}\n}\nconst LakeInfo = ({ route, navigation }) => {\n  const [lakeData, setlakeData] = useState(0);\n  const [forecast, setforecast] = useState(0);\n  const [hourly, sethourly] = useState(0);\n  const [gis, setgis] = useState(0);\n\n  useEffect(() => {\n    loadLakes();\n\n    return () => {\n      //cleanup\n    };\n  }, []);\n\n  const loadLakes = async () => {\n    console.log(\"getting lakes\");\n    let siteid = itemId;\n    const response = lakesApi.getLakeInfo(siteid).then(res => {\n      console.log(\"got data\", res.data[0].details.name);\n      //let LakeData = res.data;\n      setlakeData(res.data[0].details);\n      sethourly(res.data[0].details.hourly);\n      setforecast(res.data[0].details.forecast);\n      setgis(res.data[0].gis);\n    });\n  };\n  setBackground();\n  const { itemId } = route.params;\n  const imageUrl = \"https://vps.lakemon.com/cdn/lakeimg/\" + lakeData.newImgUrl;\n  const gisImage = \"https://vps.lakemon.com/cdn/lakeimg/\" + gis.heat_file;\n\n  return (\n    <ScrollView>\n      <Container>\n        <TopCard\n          name={lakeData.name}\n          weatherSummary={lakeData.weatherSummary}\n          airTemp={lakeData.airTemp}\n          image={imageUrl}\n        ></TopCard>\n        <FlatList\n          horizontal\n          data={hourly}\n          keyExtractor={day => day.day}\n          renderItem={({ item }) => (\n            <View style={styles.container}>\n              <ForecastCard hour={item.day_name}></ForecastCard>\n            </View>\n          )}\n        />\n\n        <BottomCard\n          name={lakeData.name}\n          airTemp={lakeData.airTemp}\n          waterTemp={lakeData.waterTemp}\n          windCurrent={lakeData.windCurrent}\n          humidity={lakeData.humidity}\n          sunset={lakeData.Tsunset}\n          sunrise={lakeData.Tsunrise}\n          ozone={lakeData.ozone}\n          lowTemp={lakeData.lowTemp}\n          highTemp={lakeData.highTemp}\n          gisImage={gisImage}\n        ></BottomCard>\n        <DescriptionCard description={lakeData.description}></DescriptionCard>\n        <FlatList\n          horizontal\n          data={hourly}\n          keyExtractor={day => day.day}\n          renderItem={({ item }) => (\n            <View style={styles.container}>\n              <DailyForecast hour={item.day_name}></DailyForecast>\n            </View>\n          )}\n        />\n      </Container>\n    </ScrollView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  center: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\"\n  },\n  container: {\n    borderColor: \"gray\",\n    height: 350,\n    width: 75\n  }\n});\n\nexport default LakeInfo;\nconst Container = styled.View`\n  flex: 1;\n`;\nconst Name = styled.Text`\n  text-align: center;\n  font-size: 35px;\n`;\n\nconst Title = styled.Text``;\nconst Divider = styled.View``;\nconst Image = styled.Image`\n  height: 50%;\n  width: 100%;\n`;\n\nconst Card = styled.View`\n  border-radius: 20px;\n  height: 50%;\n  width: 100%;\n`;\nconst Text = styled.Text`\n  color: red;\n  font-size: 25px;\n`;\n"]},"metadata":{},"sourceType":"module"}