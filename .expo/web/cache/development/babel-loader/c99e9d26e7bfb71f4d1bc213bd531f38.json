{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/dillenerb/lakemonsterreactOctoberOctober/screens/LakeListScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport lakesApi from \"../api/lakes\";\nimport Screen from \"../components/Screen\";\nimport { FlatList, TextInput } from \"react-native-gesture-handler\";\nimport { EvilIcons } from \"@expo/vector-icons\";\nimport useLocation from \"../hooks/useLocation\";\nimport LakeCard1 from \"../components/LakeCard1\";\nexport default function LakesSimpleScreen(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n  var geoLocation = useLocation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      lakes = _useState2[0],\n      setLakes = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      offset = _useState4[0],\n      setOffset = _useState4[1];\n\n  var _useState5 = useState(geoLocation),\n      _useState6 = _slicedToArray(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  useEffect(function () {\n    loadLakesInit();\n\n    if (global.location) {\n      console.log(\"global location\", global.location);\n      var a = zeroOffset();\n      var b = setLakes([]);\n      var c = loadLakesInit();\n    }\n\n    return function () {};\n  }, []);\n  var limit = 20;\n\n  var loadLakes = function loadLakes() {\n    var response;\n    return _regeneratorRuntime.async(function loadLakes$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"getting lakes\");\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(offset, limit).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 3:\n            response = _context.sent;\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadLakesInit = function loadLakesInit() {\n    var response;\n    return _regeneratorRuntime.async(function loadLakesInit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"INIT getting lakes\");\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(0, limit).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 3:\n            response = _context2.sent;\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var lastFilter = \"\";\n  var filterOffset = 0;\n\n  var loadLakesSearch = function loadLakesSearch(filter) {\n    var response;\n    return _regeneratorRuntime.async(function loadLakesSearch$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(\"Filter getting lakes\");\n\n            if (filter != lastFilter) {\n              lastFilter = filter;\n              filterOffset = 0;\n              setLakes([]);\n            } else {\n              filterOffset = filterOffset + limit;\n            }\n\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(lakesApi.getLakes(filterOffset, limit, filter).then(function (res) {\n              console.log(\"got data\");\n              var newLakes = res.data;\n              setLakes(function (lakes) {\n                return lakes.concat(newLakes);\n              });\n            }).then(function (r) {\n              countOffset();\n            }));\n\n          case 4:\n            response = _context3.sent;\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var countOffset = function countOffset() {\n    return _regeneratorRuntime.async(function countOffset$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setOffset(function (offset) {\n              return offset + limit;\n            });\n            console.log(\"Incrment Offset\");\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var zeroOffset = function zeroOffset(num) {\n    return new Promise(function (resolve, reject) {\n      setOffset(0);\n      console.log(\"zero offset\");\n    });\n  };\n\n  return React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.searchbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, React.createElement(EvilIcons, {\n    name: \"search\",\n    size: 24,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: {\n      height: 40\n    },\n    onChangeText: function onChangeText(text) {\n      return loadLakesSearch(text);\n    },\n    placeholder: \"Search Lakes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), React.createElement(FlatList, {\n    data: lakes,\n    keyExtractor: function keyExtractor(lake) {\n      return lake.siteid.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.navigate(\"LakeInfo\", {\n            itemId: item.siteid\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, React.createElement(LakeCard1, {\n        rating: \"80\",\n        siteid: item.siteid,\n        title: item.name,\n        distance: item.distance,\n        img: item.imgUrl,\n        webcams: item.activeCameras,\n        airHigh: parseInt(item.highTemp),\n        airLow: parseInt(item.lowTemp),\n        windHigh: parseInt(item.avgWind),\n        windGust: parseInt(item.avgWindGust),\n        weatherSummary: item.weatherSummary,\n        waterTemp: parseInt(item.waterTemp),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      })));\n    },\n    onEndReached: loadLakes,\n    onEndReachedThreshold: 0.5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    backgroundColor: \"lightgray\",\n    borderTopWidth: 1,\n    borderColor: \"gray\",\n    height: 165,\n    justifyContent: \"center\"\n  },\n  searchbar: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/dillenerb/lakemonsterreactOctoberOctober/screens/LakeListScreen.js"],"names":["React","useState","useEffect","lakesApi","Screen","FlatList","TextInput","EvilIcons","useLocation","LakeCard1","LakesSimpleScreen","navigation","geoLocation","lakes","setLakes","offset","setOffset","location","setLocation","loadLakesInit","global","console","log","a","zeroOffset","b","c","limit","loadLakes","getLakes","then","res","newLakes","data","concat","r","countOffset","response","lastFilter","filterOffset","loadLakesSearch","filter","num","Promise","resolve","reject","styles","searchbar","height","text","lake","siteid","toString","item","container","navigate","itemId","name","distance","imgUrl","activeCameras","parseInt","highTemp","lowTemp","avgWind","avgWindGust","weatherSummary","waterTemp","StyleSheet","create","flexDirection","backgroundColor","borderTopWidth","borderColor","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  View,\n  Button,\n  Image\n} from \"react-native\";\nimport lakesApi from \"../api/lakes\";\nimport Screen from \"../components/Screen\";\nimport { FlatList, TextInput } from \"react-native-gesture-handler\";\nimport { EvilIcons } from \"@expo/vector-icons\";\nimport useLocation from \"../hooks/useLocation\";\nimport LakeCard1 from \"../components/LakeCard1\";\n\nexport default function LakesSimpleScreen({ navigation }) {\n  const geoLocation = useLocation();\n  const [lakes, setLakes] = useState([]);\n  const [offset, setOffset] = useState(0);\n  const [location, setLocation] = useState(geoLocation);\n\n  useEffect(() => {\n    loadLakesInit();\n    if (global.location) {\n      console.log(\"global location\", global.location);\n      const a = zeroOffset();\n      const b = setLakes([]);\n      const c = loadLakesInit();\n    }\n\n    return () => {\n      //cleanup\n    };\n  }, []);\n\n  const limit = 20;\n\n  const loadLakes = async () => {\n    console.log(\"getting lakes\");\n    const response = await lakesApi\n      .getLakes(offset, limit)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n\n  const loadLakesInit = async () => {\n    console.log(\"INIT getting lakes\");\n    const response = await lakesApi\n      .getLakes(0, limit)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n\n  var lastFilter = \"\";\n  var filterOffset = 0;\n\n  const loadLakesSearch = async filter => {\n    console.log(\"Filter getting lakes\");\n    if (filter != lastFilter) {\n      lastFilter = filter;\n      filterOffset = 0;\n      setLakes([]);\n    } else {\n      filterOffset = filterOffset + limit;\n    }\n    const response = await lakesApi\n      .getLakes(filterOffset, limit, filter)\n      .then(res => {\n        console.log(\"got data\");\n        let newLakes = res.data;\n        setLakes(lakes => lakes.concat(newLakes));\n      })\n      .then(r => {\n        countOffset();\n      });\n  };\n  const countOffset = async () => {\n    setOffset(offset => offset + limit);\n    console.log(\"Incrment Offset\");\n  };\n\n  const zeroOffset = num =>\n    new Promise((resolve, reject) => {\n      setOffset(0);\n      console.log(\"zero offset\");\n    });\n\n  return (\n    <Screen>\n      <View style={styles.searchbar}>\n        <EvilIcons name=\"search\" size={24} color=\"black\" />\n        <TextInput\n          style={{ height: 40 }}\n          onChangeText={text => loadLakesSearch(text)}\n          placeholder=\"Search Lakes\"\n        ></TextInput>\n      </View>\n      <FlatList\n        data={lakes}\n        keyExtractor={lake => lake.siteid.toString()}\n        renderItem={({ item }) => (\n          <View style={styles.container}>\n            <TouchableOpacity\n              onPress={() => {\n                navigation.navigate(\"LakeInfo\", {\n                  itemId: item.siteid\n                });\n              }}\n            >\n              <LakeCard1\n                rating=\"80\"\n                siteid={item.siteid}\n                title={item.name}\n                distance={item.distance}\n                img={item.imgUrl}\n                webcams={item.activeCameras}\n                airHigh={parseInt(item.highTemp)}\n                airLow={parseInt(item.lowTemp)}\n                windHigh={parseInt(item.avgWind)}\n                windGust={parseInt(item.avgWindGust)}\n                weatherSummary={item.weatherSummary}\n                waterTemp={parseInt(item.waterTemp)}\n              ></LakeCard1>\n            </TouchableOpacity>\n          </View>\n        )}\n        onEndReached={loadLakes}\n        onEndReachedThreshold={0.5}\n      />\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    backgroundColor: \"lightgray\",\n    borderTopWidth: 1,\n    borderColor: \"gray\",\n    height: 165,\n    justifyContent: \"center\"\n  },\n  searchbar: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }\n});\n"]},"metadata":{},"sourceType":"module"}